<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>تطبيق الفيديوهات</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link href='https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'>
   <style>
/*
* ===============================================
* CSS خاص بالقائمة العائمة في الفيديوهات المشابهة فقط
* ===============================================
*/

/* استهداف القائمة العائمة نفسها */
.related-videos-section .video-menu,
.related-video .video-menu {
  /* استخدم .related-video .video-menu إذا كانت القائمة داخل كل بطاقة فيديو مشابهة */
  /* التحكم في الموضع والظهور */
  position: absolute; /* هذا هو السبب الرئيسي لعدم ظهورها فوق كل شيء */
  margin-top: -40px; /* ضبط الموضع الرأسي الأولي */
  right: 10px; /* ضبط الموضع الأفقي الأولي (لـ RTL) */
  z-index: 9999999; /* **مهم جداً:** قيمة عالية جداً لضمان الظهور فوق كل شيء */
  display: none; /* مخفية افتراضياً */
  opacity: 0; /* مخفية لتأثير الظهور التدريجي */
  transition: opacity 0.2s ease-in-out; /* تأثير سلس عند الظهور والاختفاء */

  /* التحكم في المظهر العام للقائمة */
  background: var(--dark-color); /* لون الخلفية */
  color: white; /* لون النص */
  border-radius: 8px; /* زوايا مستديرة */
  padding: 2px; /* مساحة داخلية */
  box-shadow: var(--shadow); /* ظل لإبراز القائمة */
  min-width: 180px; /* الحد الأدنى لعرض القائمة */
  direction: rtl; /* اتجاه النص من اليمين لليسار */

  /* التحكم في ترتيب المحتوى (الأزرار) داخل القائمة */
  flex-direction: column; /* ترتيب الأزرار عمودياً */
  gap: 1px; /* مسافة بين الأزرار */
}

/* عندما تكون القائمة نشطة (مرئية) */
.related-videos-section .video-menu.active,
.related-video .video-menu.active {
  display: flex; /* لعرض الأزرار كـ flexbox عمودي */
  opacity: 1; /* لجعلها مرئية بالكامل */
}

/* تنسيق الأزرار داخل القائمة */
.related-videos-section .video-menu button,
.related-video .video-menu button {
  background: transparent; /* خلفية شفافة */
  color: white; /* لون نص الزر */
  border: none; /* بلا حدود */
  padding: 3px 10px; /* مساحة داخلية للزر */
  border-radius: 5px; /* زوايا مستديرة للزر */
  cursor: pointer; /* مؤشر اليد عند التحويم */
  font-family: "Tajawal", sans-serif; /* نوع الخط (تأكد من تضمينه) */
  transition: var(--transition); /* تأثير سلس عند التحويم */
  display: flex; /* لعرض الأيقونة والنص جنباً إلى جنب */
  align-items: center; /* محاذاة عمودية للأيقونة والنص */
  gap: 8px; /* مسافة بين الأيقونة والنص */
  width: 100%; /* الزر يأخذ عرض القائمة بالكامل */
  text-align: right; /* محاذاة النص لليمين */
}

/* تأثير التحويم على الأزرار */
.related-videos-section .video-menu button:hover,
.related-video .video-menu button:hover {
  background: rgba(255, 255, 255, 0.1); /* لون خلفية خفيف عند التحويم */
}

/* حاوية أزرار الإبلاغ الفرعية */
.related-videos-section .video-menu .report-buttons,
.related-video .video-menu .report-buttons {
  display: flex; /* لعرض أزرار الإبلاغ الفرعية عمودياً */
  flex-direction: column;
  gap: 5px;
  margin-top: 0; /* مسافة علوية */
  border-top: 0px solid rgba(255, 255, 255, 0.1); /* خط فاصل */
  padding-top: 0px; /* مسافة داخلية علوية */
}

/* تنسيق أزرار الإبلاغ الفرعية */
.related-videos-section .video-menu .report-buttons button,
.related-video .video-menu .report-buttons button {
  background: none; /* خلفية خفيفة */
  color: white;
  border-radius: 5px;
  padding: 1px 10px;
  font-family: "Tajawal", sans-serif;
  font-size: 0.9em; /* حجم خط أصغر */
  cursor: pointer;
  transition: all 0.2s;
  text-align: center; /* محاذاة نص الزر في المنتصف */
}

/* تأثير التحويم على أزرار الإبلاغ الفرعية */
.related-videos-section .video-menu .report-buttons button:hover,
.related-video .video-menu .report-buttons button:hover {
  background: var(--primary-color); /* لون مميز عند التحويم */
}

/* رسالة الإبلاغ التي تظهر بعد الإرسال */
.related-videos-section .video-menu .report-message,
.related-video .video-menu .report-message {
  margin-top: -30px;margin-left:50px;
  font-size: 0.85em;padding: 3px;background: var(--dark-color);
  text-align: center;
  display: none; /* مخفية افتراضياً وتظهر بواسطة JavaScript */
}

/* ... (التنسيقات الأخرى) ... */

/* زر الإجراءات الإضافية (الثلاث نقاط) */
.more-btn {
  color: white;
  font-size: 1.5em;
  cursor: pointer;
  transition: var(--transition);
  width: 36px;
  height: 36px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  /* تمت إزالة الخلفية */
  /* background: rgba(0, 0, 0, 0.5); */
  /* تمت إزالة ظل الصندوق */
  /* box-shadow: 0 2px 4px rgba(0, 0, 0, 0.4); */
}

/* تطبيق ظل النص مباشرة على أيقونة الفونت أوسم/بوكس أيكونز */
.more-btn i {
  text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.6); /* ظل لكل نقطة */
}

/* ... (تنسيقات أخرى) ... */

/* زر الثلاث نقاط في الفيديوهات المشابهة */
.related-video .more-btn {
  width: 30px;
  height: 30px;
  font-size: 1.2em;
  /* تمت إزالة الخلفية */
  /* background: rgba(0, 0, 0, 0.5); */
  /* تمت إزالة ظل الصندوق */
  /* box-shadow: 0 1px 3px rgba(0, 0, 0, 0.3); */
}

/* تطبيق ظل النص مباشرة على أيقونة الفونت أوسم/بوكس أيكونز للفيديوهات المشابهة */
.related-video .more-btn i {
  text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5); /* ظل لكل نقطة */
}

/* ... (باقي التنسيقات) ... */

:root {
  --primary-color: #ff4757;
  --secondary-color: #ff0055;
  --dark-color: #1a1a2e;
  --light-color: #f1f2f6;
  --text-color: #2f3542;
  --text-light: #57606f;
  --white: #ffffff;
  --shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  --transition: all 0.3s ease;
  --bg-gradient: linear-gradient(to bottom, #1a1a2e, #16213e);
  --channel-bg: rgba(26, 26, 46, 0.7);

  /* متغيرات المشغل */
  --player-primary-color: #ff375f;
  --progress-height: 8px;
  --control-height: 70px;
  --touch-area-height: 30px;
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: "Tajawal", sans-serif;
  -webkit-tap-highlight-color: transparent;
}

body {
  background: var(--bg-gradient);
  color: white;
  min-height: 100vh;
  overflow-x: hidden;
  max-width: 100vw;
  touch-action: manipulation; /* للمشغل */
}

/* عندما يكون الجسم في وضع ملء الشاشة، أزل أي تجاوز */
body.fullscreen {
  overflow: hidden;
}

.search-container {
  display: flex;
  gap: 10px;
  margin: 15px 20px;
}

.search-box {
  flex-grow: 1;
  position: relative;
}

.search-input {
  width: 100%;
  padding: 12px 15px;
  padding-right: 40px;
  border: none;
  border-radius: 25px;
  background: rgba(255, 255, 255, 0.1);
  color: white;
  font-family: "Tajawal";
  font-size: 0.95em;
  outline: none;
  transition: all 0.3s;
}

.search-input:focus {
  background: rgba(255, 255, 255, 0.15);
  box-shadow: 0 0 0 2px var(--primary-color);
}

.search-icon {
  position: absolute;
  left: 15px;
  top: 50%;
  transform: translateY(-50%);
  color: #aaa;
}

.refresh-btn {
  background: rgba(255, 255, 255, 0.1);
  border: none;
  border-radius: 50%;
  width: 45px;
  height: 45px;
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  font-size: 1.2em;
  cursor: pointer;
  transition: all 0.3s;
  flex-shrink: 0;
}

.refresh-btn:active {
  transform: rotate(180deg);
  background: rgba(255, 255, 255, 0.2);
}

.categories {
  display: flex;
  gap: 8px;
  padding: 0 15px 15px;
  overflow-x: auto;
  scrollbar-width: none;
}

.categories::-webkit-scrollbar {
  display: none;
}

.category-btn {
  background: rgba(255, 255, 255, 0.1);
  border: none;
  border-radius: 20px;
  padding: 8px 15px;
  color: white;
  font-family: "Tajawal";
  font-size: 0.85em;
  cursor: pointer;
  white-space: nowrap;
  transition: all 0.2s;
}

.category-btn:hover,
.category-btn.active {
  background: var(--primary-color);
  color: #16213e;
}

.video-container {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
  gap: 15px;
  padding: 0 15px 90px;
}

@media (max-width: 768px) {
  .video-container {
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
  }
}

.video-card {
  background: var(--channel-bg);
  border-radius: 12px;
  overflow: hidden;
  transition: var(--transition);
  cursor: pointer;
  position: relative;
}

.video-card:active {
  transform: scale(0.98);
}

.thumbnail {
  position: relative;
  padding-bottom: 56.25%;
  background: var(--dark-color);
}

.thumbnail img {
  position: absolute;
  width: 100%;
  height: 100%;
  object-fit: cover;
  transition: var(--transition);
}

.play-icon {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  color: var(--white);
  font-size: 50px;
  opacity: 0.9;
  text-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);
  transition: var(--transition);
}

/* حاوية الأزرار في الفيديو الرئيسي */
.video-card-btns {
  position: absolute;
  top: 10px;
  left: 10px;
  right: 10px;
  display: flex;
  justify-content: space-between;
  align-items: center;
  z-index: 2;
  /* هذا السطر سيقوم بتبديل أماكن الأزرار */
  flex-direction: row-reverse; /* زر القلب على اليسار الآن */
  direction: rtl; /* لضمان أن flex-direction: row-reverse يعمل بشكل صحيح */
}

/* زر القلب في الفيديوهات الرئيسية */
.fav-btn {
  color: white;
  font-size: 1.5em;
  cursor: pointer;
  transition: var(--transition);
  background: rgba(0, 0, 0, 0.5); /* لا تزال هنا لخلفية زر القلب */
  width: 36px;
  height: 36px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
}

.fav-btn.active {
  color: var(--secondary-color);
}

/* زر الإجراءات الإضافية (الثلاث نقاط) */
.more-btn {
  color: white;
  font-size: 1.5em;
  cursor: pointer;
  transition: var(--transition);
  width: 36px;
  height: 36px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
}

/* القائمة العائمة للفيديو */
.video-menu {
  position: absolute;
  background: var(--dark-color);
  color: white;
  margin: -30px 0 0 -30px;
  border-radius: 8px;
  padding: 10px;
  z-index: 10000; /* تم زيادة Z-index */
  display: none; /* مخفية افتراضياً */
  box-shadow: var(--shadow);
  min-width: 150px;
  opacity: 0; /* للتحريك السلس عند الظهور */
  transition: opacity 0.2s ease-in-out;
  flex-direction: column; /* جعل العناصر تتكدس عمودياً */
  gap: 5px; /* إضافة مسافة بين الأزرار */
  right: unset; /* لإلغاء أي right قد يتعارض مع left */
  direction: rtl; /* لجعل القائمة تتجه من اليمين لليسار */
}

.video-menu.active {
  display: flex;
  opacity: 1;
}

.video-menu button {
  background: transparent;
  color: white;
  border: none;
  padding: 8px 10px;
  border-radius: 5px;
  cursor: pointer;
  font-family: "Tajawal";
  transition: var(--transition);
  display: flex;
  align-items: center;
  gap: 8px; /* مسافة بين الأيقونة والنص */
  width: 100%; /* لتأخذ الزر عرض القائمة كاملاً */
  text-align: right; /* محاذاة النص لليمين */
}

.video-menu button:hover {
  background: rgba(255, 255, 255, 0.1);
}

.video-menu .report-buttons {
  display: flex;
  flex-direction: column;
  gap: 5px;
  margin-top: 10px;
  border-top: 1px solid rgba(255, 255, 255, 0.1);
  padding-top: 10px;
}

.video-menu .report-buttons button {
  background: rgba(255, 255, 255, 0.1);
  color: white;
  border-radius: 5px;
  padding: 8px 10px;
  font-family: "Tajawal";
  font-size: 0.9em;
  cursor: pointer;
  transition: all 0.2s;
}

.video-menu .report-buttons button:hover {
  background: var(--primary-color);
}

.video-menu .report-message {
  margin-top: 10px;
  font-size: 0.85em;
  text-align: center;
  display: none;
}

.video-info {
  padding: 12px;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.video-text {
  flex-grow: 1;
}

.video-title {
  font-size: 1em;
  margin-bottom: 5px;
  font-weight: 500;
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
  line-height: 1.4;
}

.video-meta {
  display: flex;
  align-items: center;
  gap: 8px;
  font-size: 0.8em;
  color: #aaa;
}

.video-category {
  font-size: 0.85em;
  color: #aaa;
}

.video-published {
  font-size: 0.85em;
  color: #aaa;
}

.video-player {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: var(--dark-color);
  z-index: 2000;
  display: none;
  flex-direction: column;
  overflow-y: auto;
  direction: ltr; /* مهم: لتعيين اتجاه المشغل للعمل بشكل صحيح */
}

.player-header {
  display: flex;
  justify-content: space-between; /* للحفاظ على المسافة بين زر الإغلاق والعنوان وباقي الأزرار */
  align-items: center;
  padding: 15px;
  background: rgba(0, 0, 0, 0.8);
  position: sticky;
  top: 0;
  z-index: 10; /* تأكد أن z-index أعلى بما يكفي ليظهر فوق الفيديو */
}

/* حاوية الأزرار الجديدة في رأس المشغل */
.player-header-controls {
  display: flex;
  align-items: center;
  gap: 15px; /* مسافة بين زر الإغلاق وزر + */
  direction: rtl; /* لترتيب زر + على اليمين */
}

.player-title {
  color: var(--white);
  font-size: 0.9rem; /* تم تصغير حجم الخط هنا */
  max-width: 70%; /* يمكنك تعديل هذا إذا كان العنوان طويلًا جدًا */
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  direction: rtl; /* عنوان المشغل يبقى RTL */
  flex-grow: 1; /* للسماح للعنوان بأخذ المساحة المتاحة */
  margin-left: 10px; /* مسافة من زر الإغلاق */
  margin-right: 10px; /* مسافة من زر + */
}

.close-player {
  color: var(--white);
  font-size: 30px;
  cursor: pointer;
  transition: var(--transition);
}

.close-player:hover {
  color: var(--primary-color);
}

/* زر الثلاث نقاط الجديد في رأس المشغل */
.player-header-more-btn {
  color: var(--white);
  font-size: 1.5em; /* يمكنك تعديل الحجم حسب الرغبة */
  cursor: pointer;
  transition: var(--transition);
  background: rgba(0, 0, 0, 0.5); /* إضافة خلفية له */
  width: 36px;
  height: 36px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
}

.player-header-more-btn:hover {
  color: var(--primary-color);
}

.player-content {
  width: 100%;
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
  flex-grow: 1;
  display: flex;
  flex-direction: column;
  height: 100%; /* تأكد من أن z-index player-video-wrapper لا يتداخل مع الـ player-header */
  position: relative;
}

/* تنسيقات مشغل الفيديو الجديد */
.player-video-wrapper {
  position: relative;
  width: 100%;
  padding-bottom: 56.25%; /* نسبة العرض إلى الارتفاع 16:9 */
  max-width: 100%;
  background: #000; /* خلفية سوداء للفيديو */
  border-radius: 8px;
  overflow: hidden;
  margin-bottom: 20px;
  flex-shrink: 0; /* لمنع الانكماش في وضع العمود */
  z-index: 1; /* يجب أن يكون أقل من z-index الخاص بالـ player-header */
}

#playerVideo {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  object-fit: contain; /* يحافظ على نسبة الأبعاد */
  display: block;
  transition: object-fit 0.3s ease;
}

/* عند وضع ملء الشاشة، نتحكم في التمدد بناءً على اتجاه الشاشة */
body.fullscreen.landscape #playerVideo {
  object-fit: contain; /* نجعله contain افتراضيًا في الوضع الأفقي لملء الشاشة */
  width: 100%;
  height: 100%;
}

body.fullscreen.landscape #playerVideo.fill-width {
  object-fit: fill; /* تمدد الفيديو ليملأ العرض */
}

/* عندما يكون المشغل في وضع ملء الشاشة الأفقي، نلغي padding-bottom ونضبط الارتفاع */
body.fullscreen.landscape .player-video-wrapper {
  padding-bottom: 0;
  height: 100%;
  width: 100%; /* تأكد من أنه يأخذ العرض الكامل */
  display: flex; /* ليتوسط الفيديو */
  align-items: center;
  justify-content: center;
}

/* حاوية أزرار المشغل */
.player-video-actions {
  position: absolute;
  top: 10px;
  left: 15px;
  right: 15px;
  display: flex;
  justify-content: flex-start; /* القلب على اليسار الآن */
  align-items: center;
  z-index: 2; /* يجب أن يكون أعلى من z-index الخاص بالـ player-video-wrapper ولكن أقل من player-header */
  direction: ltr; /* لترتيب القلب على اليسار */
  opacity: 1;
  transition: opacity 0.3s ease;
}

/* إخفاء الأزرار مع باقي عناصر التحكم */
.player-controls-container.hidden-controls + .player-video-actions {
  opacity: 0;
  pointer-events: none; /* منع التفاعل عند الإخفاء */
}

.player-video-actions .fav-btn {
  color: white;
  font-size: 1.5em;
  cursor: pointer;
  transition: var(--transition);
  background: rgba(0, 0, 0, 0.5); /* خلفية لأزرار الإجراءات في المشغل */
  width: 36px;
  height: 36px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
}

/* إخفاء زر الثلاث نقاط القديم من هذه الحاوية */
.player-video-actions .more-btn {
  display: none !important;
}

.player-video-actions .fav-btn.active {
  color: var(--secondary-color);
}

/* شريط التقدم للمشغل الجديد */
.player-progress-container {
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  height: var(--progress-height);
  background: rgba(255, 255, 255, 0.15);
  z-index: 1000000;
  transition:
    height 0.2s ease,
    bottom 0.3s ease;
}

.player-progress-touch-area {
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  height: var(--touch-area-height);
  z-index: 1000002;
}

.player-progress-container.active {
  height: calc(var(--progress-height) * 2);
}

.player-progress-container.hidden-controls {
  bottom: -5px;
}

.player-progress-bar {
  height: 100%;
  width: 0%;
  background: var(--player-primary-color);
  position: relative;
  transition: width 0.1s linear;
}

/* مؤشر الوقت عند اللمس للمشغل الجديد */
.player-time-preview {
  position: absolute;
  bottom: calc(100% + 10px);
  transform: translateX(-50%); /* يبقى في المنتصف الأفقي */
  color: white;
  font-size: 14px;
  font-weight: 500;
  background: rgba(0, 0, 0, 0.7);
  padding: 5px 10px;
  border-radius: 12px;
  white-space: nowrap;
  opacity: 0;
  transition: opacity 0.2s;
  pointer-events: none;
  z-index: 1000001;
}

.player-progress-container.active .player-time-preview {
  opacity: 1;
}

/* خط التوجيه العمودي للمشغل الجديد */
.player-preview-line {
  position: absolute;
  bottom: 100%;
  left: unset; /* إزالة left الافتراضي */
  width: 2px;
  height: 20px;
  background: white;
  transform: translateX(-50%);
  opacity: 0;
  pointer-events: none;
  z-index: 1000000;
}

.player-progress-container.active .player-preview-line {
  opacity: 1;
}

/* عناصر التحكم للمشغل الجديد */
.player-controls-container {
  position: absolute;
  bottom: var(--progress-height);
  left: 0;
  right: 0;
  height: var(--control-height);
  display: flex;
  align-items: center;
  padding: 0 15px;
  z-index: 999999;
  background: linear-gradient(to top, rgba(0, 0, 0, 0.7), transparent);
  transition: opacity 0.3s;
  direction: ltr; /* لضمان ترتيب الأزرار والوقت بشكل صحيح */
}

.player-controls-row {
  display: flex;
  align-items: center;
  justify-content: space-between;
  width: 100%;
}

/* الأزرار للمشغل الجديد */
.player-control-buttons {
  display: flex;
  align-items: center;
  gap: 15px;
  z-index: 1000002;
  flex-direction: row-reverse; /* لعكس ترتيب الأزرار ليتناسب مع RTL */
}

.player-control-btn {
  color: white;
  background: rgba(255, 255, 255, 0.2);
  border: none;
  width: 40px;
  height: 40px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 20px;
  transition: all 0.2s;
  z-index: 1000003;
}

/* زر التمديد - مخفي افتراضيًا */
.player-stretch-btn {
  display: none;
}

/* يظهر فقط في وضع ملء الشاشة الأفقي */
body.fullscreen.landscape .player-stretch-btn {
  display: flex;
}

.player-control-btn:active {
  transform: scale(0.9);
  background: rgba(255, 255, 255, 0.3);
}

/* الوقت - ظاهر دائمًا للمشغل الجديد */
.player-time-display {
  color: white;
  font-size: 14px;
  font-weight: 500;
  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.8);
  padding: 5px 10px;
  border-radius: 12px;
  background: rgba(0, 0, 0, 0.4);
  z-index: 1000004;
  margin-right: auto; /* يدفع العناصر الأخرى لليسار */
  margin-left: 0; /* لإلغاء أي هامش تلقائي قد يؤثر على المحاذاة */
}

/* تأثير النبض المركزي للمشغل الجديد */
@keyframes pulse {
  0% {
    transform: translate(-50%, -50%) scale(0.8);
    opacity: 0.8;
  }
  100% {
    transform: translate(-50%, -50%) scale(1.5);
    opacity: 0;
  }
}

.player-pulse-effect {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 100px;
  height: 100px;
  background: rgba(255, 255, 255, 0.3);
  border-radius: 50%;
  pointer-events: none;
  z-index: 999998;
  animation: pulse 0.6s ease-out forwards;
}

/* تأثيرات القفز للمشغل الجديد */
@keyframes jumpIndicator {
  0%,
  100% {
    transform: translate(-50%, -50%) scale(0.8);
    opacity: 0;
  }
  50% {
    transform: translate(-50%, -50%) scale(1.1);
    opacity: 0.7;
  }
}

.player-jump-indicator {
  position: absolute;
  top: 50%;
  /* هنا نجعلها تظهر في المنتصف بالضبط */
  left: 50%;
  transform: translate(-50%, -50%); /* للتوسيط */
  font-size: 24px;
  color: white;
  background: rgba(0, 0, 0, 0.6);
  padding: 5px 15px;
  border-radius: 20px;
  opacity: 0;
  pointer-events: none;
  z-index: 999997;
}

.player-jump-forward {
  /* تعديل لتظهر أقرب للمنتصف الأيمن */
  transform: translate(calc(-50% + 50px), -50%);
}

.player-jump-backward {
  /* تعديل لتظهر أقرب للمنتصف الأيسر */
  transform: translate(calc(-50% - 50px), -50%);
}

.related-videos {
  margin-top: 15px; /* تقليل المسافة هنا */
  flex-grow: 1; /* للسماح لها بأخذ المساحة المتبقية */
  direction: rtl; /* أعد اتجاه المحتوى العربي إلى RTL */
}

.section-title {
  color: var(--white);
  margin-bottom: 10px; /* تقليل المسافة */
  font-size: 1.2rem;
  display: flex;
  align-items: center;
}

.section-title i {
  margin-left: 10px; /* يبقى الهامش الأيسر للأيقونة */
}

.related-container {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
  gap: 15px;
}

.related-video {
  display: flex;
  background: rgba(255, 255, 255, 0.05);
  border-radius: 8px;
  overflow: hidden;
  transition: var(--transition);
  cursor: pointer;
  position: relative; /* مهم لتموضع الأزرار الداخلية */
  flex-direction: row; /* دائما في صف */
}

.related-video:hover {
  background: rgba(255, 255, 255, 0.1);
}

/* تعديلات على الصورة المصغرة للفيديوهات المشابهة */
.related-thumbnail {
  width: 160px; /* تم زيادة العرض قليلاً */
  height: 0; /* نضبط الارتفاع على 0 لنستخدم padding-bottom لنسبة العرض إلى الارتفاع */
  padding-bottom: calc(
    160px * 9 / 16
  ); /* نسبة 16:9 بناءً على العرض الجديد 160 بكسل */
  position: relative;
  flex-shrink: 0;
  overflow: hidden; /* لإخفاء أي جزء زائد من الصورة */
}

.related-thumbnail img {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  object-fit: cover; /* لضمان ملء الصورة للحاوية دون تشوه */
}

.related-play-icon {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  color: var(--white);
  font-size: 20px;
  opacity: 0.8;
}

/* حاوية الأزرار في الفيديوهات المشابهة */
.related-video-btns {
  position: absolute;
  top: 5px; /* تم تعديله ليكون أعلى قليلاً */
  left: 5px; /* تم تعديله */
  right: 5px; /* تم تعديله */
  display: flex;
  justify-content: space-between;
  align-items: center;
  z-index: 2;
  flex-direction: row-reverse; /* زر القلب على اليسار الآن */
  direction: rtl; /* لضمان أن flex-direction: row-reverse يعمل بشكل صحيح */
}

.related-video .fav-btn {
  width: 30px;
  height: 30px;
  font-size: 1.2em;
  background: rgba(0, 0, 0, 0.5); /* خلفية لأزرار الإجراءات في المشابهة */
}

.related-video .fav-btn.active {
  color: var(--secondary-color);
}

.related-video .more-btn {
  width: 30px;
  height: 30px;
  font-size: 1.2em;
}

.related-info {
  padding: 10px; /* تم إضافة حشو */
  display: flex;
  flex-direction: column; /* لجعل العنوان والميتا تتكدس عمودياً */
  justify-content: center; /* لتوسيط المحتوى عمودياً */
  flex-grow: 1; /* للسماح لها بأخذ المساحة المتبقية */
}

.related-title {
  font-size: 0.9em;
  margin-bottom: 5px;
  font-weight: 500;
  display: -webkit-box;
  -webkit-line-clamp: 2; /* عرض سطرين كحد أقصى */
  -webkit-box-orient: vertical;
  overflow: hidden;
  line-height: 1.4;
}

.related-meta {
  display: flex;
  align-items: center;
  gap: 8px;
  font-size: 0.75em; /* تصغير الخط قليلاً */
  color: #aaa;
}

/* تنسيقات أزرار تحت المشغل - تم إخفاؤها */
.player-actions {
  display: none;
}

.player-more-container {
  position: relative;
}

/* قائمة المزيد في المشغل (بنفس تصميم القائمة الرئيسية) */
.player-more-menu {
  position: fixed;
  background: var(--dark-color);
  color: white;
  border-radius: 8px;
  padding: 10px;
  z-index: 99999999; /* تم زيادة Z-index بشكل كبير */
  display: none; /* مخفية افتراضيًا */
  box-shadow: var(--shadow);
  min-width: 150px;
  margin: 0 -150px 0 0;
  /* تم إزالة left و right هنا ليتم تحديدهم في JavaScript */
  opacity: 0; /* للتحريك السلس عند الظهور */
  transition: opacity 0.2s ease-in-out; /* إضافة انتقال لظهور القائمة */
  transform-origin: top right; /* نقطة الأصل للتحويل (إذا أضفنا تحويلات) */
  flex-direction: column; /* جعل العناصر تتكدس عمودياً */
  gap: 5px; /* إضافة مسافة بين الأزرار */
  direction: rtl; /* اتجاه المحتوى داخل القائمة RTL */
}

.player-more-menu.active {
  display: flex; /* إظهار القائمة */
  opacity: 1; /* إظهارها بشكل كامل */
}

.player-more-menu button {
  background: transparent;
  color: white;
  border: none;
  padding: 8px 10px;
  border-radius: 5px;
  cursor: pointer;
  font-family: "Tajawal";
  transition: var(--transition);
  display: flex;
  align-items: center;
  gap: 8px;
  width: 100%;
  text-align: right;
}

.player-more-menu button:hover {
  background: rgba(255, 255, 255, 0.1);
}

/* تنسيقات خاصة لأزرار الإبلاغ في قائمة المشغل */
.player-more-menu .report-buttons {
  display: flex;
  flex-direction: column;
  gap: 5px;
  margin-top: 10px;
  border-top: 1px solid rgba(255, 255, 255, 0.1);
  padding-top: 10px;
}

.player-more-menu .report-buttons button {
  background: rgba(255, 255, 255, 0.1);
  color: white;
  border-radius: 5px;
  padding: 8px 10px;
  font-family: "Tajawal";
  font-size: 0.9em;
  cursor: pointer;
  transition: all 0.2s;
}

.player-more-menu .report-buttons button:hover {
  background: var(--primary-color);
}

.player-more-menu .report-message {
  margin-top: 10px;
  font-size: 0.85em;
  text-align: center;
  display: none;
}

.bottom-nav {
  position: fixed;
  bottom: 0;
  left: 0;
  right: 0;
  background: rgba(22, 33, 62, 0.9);
  backdrop-filter: blur(10px);
  display: flex;
  justify-content: space-around;
  align-items: center;
  padding: 10px 0;
  z-index: 1000;
  border-top: 1px solid rgba(0, 247, 255, 0.1);
  direction: rtl; /* اتجاه التنقل يبقى RTL */
}

.nav-item {
  text-align: center;
  color: #aaa;
  font-size: 0.8em;
  transition: var(--transition);
  cursor: pointer;
  padding: 5px 10px;
  border-radius: 8px;
}

.nav-item.active {
  color: var(--primary-color);
  background: transparent;
}

.nav-icon {
  font-size: 1.6em;
  display: block;
  margin-bottom: 3px;
}

.loading {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 200px;
  grid-column: 1/-1;
}

.spinner {
  width: 40px;
  height: 40px;
  border: 4px solid rgba(255, 255, 255, 0.3);
  border-radius: 50%;
  border-top-color: var(--primary-color);
  animation: spin 1s ease-in-out infinite;
}

@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}

.no-results {
  text-align: center;
  padding: 40px 20px;
  color: #aaa;
  display: none;
  grid-column: 1/-1;
}

@media (max-width: 768px) {
  .player-content {
    padding: 10px;
  }

  .related-container {
    grid-template-columns: 1fr;
  }

  .related-video {
    flex-direction: row; /* إرجاعها لصف بدلاً من عمود لتبدو أفضل مع الصور الأكبر */
    align-items: center; /* لمحاذاة العناصر عمودياً في المنتصف */
  }
  .related-thumbnail {
    width: 160px; /* الحفاظ على الحجم الأفقي للموبايل */
    height: 0;
    padding-bottom: calc(160px * 9 / 16);
  }
  .related-info {
    flex-direction: column;
    align-items: flex-start;
    padding: 10px; /* إضافة بعض الحشو للراحة */
  }
}

.load-more {
  grid-column: 1/-1;
  text-align: center;
  padding: 20px;
}

.load-more-btn {
  background: var(--primary-color);
  color: white;
  border: none;
  padding: 10px 20px;
  border-radius: 20px;
  cursor: pointer;
  font-family: "Tajawal";
  transition: var(--transition);
}

.load-more-btn:hover {
  background: var(--secondary-color);
}

    </style>
</head>
<body>
    <div class="search-container">
        <div class="search-box">
            <input type="text" class="search-input" placeholder="ابحث عن فيديوهات..." id="searchInput">
            <i class='bx bx-search search-icon'></i>
        </div>
        <button class="refresh-btn" id="refreshBtn">
            <i class='bx bx-refresh'></i>
        </button>
    </div>

    <div class="categories" id="categories">
        <button class="category-btn active" data-category="all">الكل</button>
    </div>

    <div class="video-container" id="videoContainer">
    </div>

    <div class="load-more" id="loadMore" style="display: none;">
        <button class="load-more-btn" id="loadMoreBtn">تحميل المزيد</button>
    </div>

    <div class="no-results" id="noResults">
        <i class='bx bx-search-alt' style="font-size: 3em; margin-bottom: 15px;"></i>
        <p>لا توجد فيديوهات مطابقة للبحث</p>
    </div>

    <div class="video-player" id="videoPlayer">
        <div class="player-header">
            <div class="player-header-controls">
                <div class="player-header-more-btn" id="playerHeaderMoreBtn">
                    <i class='bx bx-plus'></i>
                </div>
                <div class="close-player" id="closePlayer">×</div>
            </div>
            <div style="font-weight: bold;" class="player-title" id="playerTitle"></div>
        </div>
        <div class="player-more-menu" id="playerMoreMenu">
            <button id="playerDownloadBtn" onclick="downloadVideo(event, currentVideo.videoUrl, currentVideo.title)"><i class="fas fa-download"></i> تحميل</button>
            <button id="playerNotInterestedBtn" onclick="markNotInterested(event, currentVideo.id)"><i class="fas fa-ban"></i> لا يهمني</button>
            <button id="playerReportBtn" data-video-id="" onclick="reportVideo(event, currentVideo.id, currentVideo.title)"><i class="fas fa-flag"></i> إبلاغ</button>
            <div class="report-buttons" id="playerReportButtons" style="display:none;">
                <button onclick="sendReport(event, currentVideo.title, 'الفيديو لا يشتغل')"> الفيديو لا يشتغل</button>
                <button onclick="sendReport(event, currentVideo.title, 'محتوى غير لائق')"> محتوى غير لائق</button>
            </div>
            <div class="report-message" id="playerReportMessage" style="display:none; color:green;">
                تم إرسال الإبلاغ بنجاح.
            </div>
        </div>
        <div class="player-content">
            <div class="player-video-wrapper" id="playerVideoWrapper">
                <video id="playerVideo" poster="https://via.placeholder.com/800x450/333/666?text=Mobile+Player">
                    متصفحك لا يدعم تشغيل الفيديو
                </video>

                <div class="player-video-actions">
                    <div class="fav-btn" id="playerFavBtn">
                        <i class="bx bx-heart"></i>
                    </div>
                    <div class="more-btn" style="display:none;">
                        <i class="fas fa-ellipsis-v"></i>
                    </div>
                </div>

                <div class="player-jump-indicator player-jump-forward" id="playerJumpForward">+10s</div>
                <div class="player-jump-indicator player-jump-backward" id="playerJumpBackward">-10s</div>

                <div class="player-pulse-effect" id="playerPulseEffect"></div>

                <div class="player-progress-container" id="playerProgressContainer">
                    <div class="player-progress-bar" id="playerProgressBar"></div>
                    <div class="player-time-preview" id="playerTimePreview">00:00</div>
                    <div class="player-preview-line" id="playerPreviewLine"></div>
                </div>

                <div class="player-progress-touch-area" id="playerProgressTouchArea"></div>

                <div class="player-controls-container" id="playerControlsContainer">
                    <div class="player-controls-row">
                        <span class="player-time-display" id="playerTimeDisplay">00:00 / 00:00</span>

                        <div class="player-control-buttons">

                            <button class="player-control-btn player-stretch-btn" id="playerStretchBtn">
                                <i class="fas fa-expand-alt"></i>
                            </button>
                            <button class="player-control-btn player-fullscreen-btn" id="playerFullscreenBtn">
                                <i class="fas fa-expand"></i>
                            </button>
                            <button class="player-control-btn player-mute-btn" id="playerMuteBtn">
                                <i class="fas fa-volume-up"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <div class="related-videos">
                <div class="section-title">
                    <i class="fas fa-film"></i>
                    <span>فيديوهات مشابهة</span>
                </div>
                <div class="related-container" id="relatedVideos">
                </div>
            </div>
        </div>
    </div>

    <div class="bottom-nav">
        <div class="nav-item" id="navChannels">
            <i class="nav-icon bx bx-tv"></i>
            قنوات
        </div>
        <div class="nav-item active" id="navVideos">
            <i class="nav-icon bx bx-video"></i>
            فيديوهات
        </div>
        <div class="nav-item" id="navFavorites">
            <i class="nav-icon bx bx-heart"></i>
            المفضلة
        </div>
        <div class="nav-item" id="navHistory">
            <i class="nav-icon bx bx-history"></i>
            سجل المشاهدة
        </div>
    </div>

    <script>
        // متغيرات التطبيق
        let allVideos = [];
        let currentVideo = null;
        let currentCategory = 'all';
        let currentSearch = '';
        let favorites = JSON.parse(localStorage.getItem('videoFavorites')) || [];
        // إضافة سجل المشاهدة
        let watchHistory = JSON.parse(localStorage.getItem('watchHistory')) || [];
        let currentView = 'videos';
        let displayedVideos = 20;
        let isLoading = false;
        let userPreferences = JSON.parse(localStorage.getItem('userPreferences')) || {
            watchedVideos: 0,
            preferredCategories: {},
            preferredTitles: {}
        };

        // متغيرات المشغل الجديد
        const playerVideo = document.getElementById('playerVideo');
        const playerVideoWrapper = document.getElementById('playerVideoWrapper');
        const playerControlsContainer = document.getElementById('playerControlsContainer');
        const playerProgressContainer = document.getElementById('playerProgressContainer');
        const playerProgressBar = document.getElementById('playerProgressBar');
        const playerProgressTouchArea = document.getElementById('playerProgressTouchArea');
        const playerTimeDisplay = document.getElementById('playerTimeDisplay');
        const playerTimePreview = document.getElementById('playerTimePreview');
        const playerPreviewLine = document.getElementById('playerPreviewLine');
        const playerMuteBtn = document.getElementById('playerMuteBtn');
        const playerFullscreenBtn = document.getElementById('playerFullscreenBtn');
        const playerStretchBtn = document.getElementById('playerStretchBtn');
        const playerJumpForward = document.getElementById('playerJumpForward');
        const playerJumpBackward = document.getElementById('playerJumpBackward');
        const playerPulseEffect = document.getElementById('playerPulseEffect');
        const body = document.body;

        // دالة لتنسيق الوقت المنقضي بشكل صحيح للغة العربية
        function formatTimeAgo(seconds) {
            const minute = 60;
            const hour = minute * 60;
            const day = hour * 24;
            const week = day * 7;
            const month = day * 30;
            const year = day * 365;

            if (seconds < minute) {
                if (seconds === 1) return 'قبل ثانية';
                if (seconds === 2) return 'قبل ثانيتين';
                if (seconds > 2 && seconds < 11) return `قبل ${seconds} ثواني`;
                return `قبل ${seconds} ثانية`;
            }
            else if (seconds < hour) {
                const minutes = Math.floor(seconds / minute);
                if (minutes === 1) return 'قبل دقيقة';
                if (minutes === 2) return 'قبل دقيقتين';
                if (minutes > 2 && minutes < 11) return `قبل ${minutes} دقائق`;
                return `قبل ${minutes} دقيقة`;
            }
            else if (seconds < day) {
                const hours = Math.floor(seconds / hour);
                if (hours === 1) return 'قبل ساعة';
                if (hours === 2) return 'قبل ساعتين';
                if (hours > 2 && hours < 11) return `قبل ${hours} ساعات`;
                return `قبل ${hours} ساعة`;
            }
            else if (seconds < week) {
                const days = Math.floor(seconds / day);
                if (days === 1) return 'قبل يوم';
                if (days === 2) return 'قبل يومين';
                if (days > 2 && days < 11) return `قبل ${days} أيام`;
                return `قبل ${days} يوم`;
            }
            else if (seconds < month) {
                const weeks = Math.floor(seconds / week);
                if (weeks === 1) return 'قبل أسبوع';
                if (weeks === 2) return 'قبل أسبوعين';
                if (weeks > 2 && weeks < 11) return `قبل ${weeks} أسابيع`;
                return `قبل ${weeks} أسبوع`;
            }
            else if (seconds < year) {
                const months = Math.floor(seconds / month);
                if (months === 1) return 'قبل شهر';
                if (months === 2) return 'قبل شهرين';
                if (months > 2 && months < 11) return `قبل ${months} أشهر`;
                return `قبل ${months} شهر`;
            }
            else {
                const years = Math.floor(seconds / year);
                if (years === 1) return 'قبل سنة';
                if (years === 2) return 'قبل سنتين';
                return `قبل ${years} سنوات`;
            }
        }

        // دالة التحميل البطيء للفيديوهات
        function setupInfiniteScroll() {
            window.addEventListener('scroll', () => {
                if (isLoading) return;

                const scrollPosition = window.innerHeight + window.scrollY;
                const pageHeight = document.body.offsetHeight;
                const threshold = pageHeight - 500;

                if (scrollPosition >= threshold && displayedVideos < allVideos.length) {
                    loadMoreVideos();
                }
            });

            // زر تحميل المزيد
            document.getElementById('loadMoreBtn').addEventListener('click', loadMoreVideos);
        }

        function loadMoreVideos() {
            if (isLoading) return;

            isLoading = true;
            displayedVideos += 20;

            // إظهار زر تحميل المزيد فقط إذا كان هناك المزيد للتحميل
            if (displayedVideos < allVideos.length) {
                document.getElementById('loadMore').style.display = 'block';
            } else {
                document.getElementById('loadMore').style.display = 'none';
            }

            filterVideos();
            isLoading = false;
        }

        // دالة لتتبع تفضيلات المستخدم
        function trackUserPreferences(video) {
            userPreferences.watchedVideos++;

            // تحديث التفضيلات حسب التصنيفات
            video.categories.forEach(cat => {
                userPreferences.preferredCategories[cat] = (userPreferences.preferredCategories[cat] || 0) + 1;
            });

            // تحديث التفضيلات حسب العناوين (الكلمات المفتاحية)
            const words = video.title.split(' ');
            words.forEach(word => {
                if (word.length > 3) { // نتجاهل الكلمات القصيرة
                    userPreferences.preferredTitles[word] = (userPreferences.preferredTitles[word] || 0) + 1;
                }
            });

            localStorage.setItem('userPreferences', JSON.stringify(userPreferences));

            // إذا شاهد أكثر من 10 فيديوهات، نضيف تبويب "لك"
            if (userPreferences.watchedVideos >= 10 && !document.querySelector('.category-btn[data-category="forYou"]')) {
                addForYouTab();
            }
        }

        // دالة لإضافة تبويب "لك"
        function addForYouTab() {
            const categoriesContainer = document.getElementById('categories');

            // تغيير اسم تبويب "الكل" إلى "جديد"
            const allTab = document.querySelector('.category-btn[data-category="all"]');
            if (allTab) {
                allTab.textContent = 'جديد';
                allTab.dataset.category = 'new';
            }

            // إضافة تبويب "لك" في البداية
            const forYouBtn = document.createElement('button');
            forYouBtn.className = 'category-btn active';
            forYouBtn.textContent = 'لك';
            forYouBtn.dataset.category = 'forYou';
            forYouBtn.onclick = () => {
                filterByCategory('forYou');
            };
            categoriesContainer.insertBefore(forYouBtn, categoriesContainer.firstChild);

            // تصفية الفيديوهات حسب التفضيلات
            filterByCategory('forYou');
        }

        // دالة للحصول على الفيديوهات الموصى بها
        function getRecommendedVideos() {
            // ترتيب التصنيفات المفضلة
            const sortedCategories = Object.entries(userPreferences.preferredCategories)
                .sort((a, b) => b[1] - a[1]);

            // ترتيب الكلمات المفضلة
            const sortedKeywords = Object.entries(userPreferences.preferredTitles)
                .sort((a, b) => b[1] - a[1]);

            // فلترة الفيديوهات حسب التفضيلات
            return allVideos
                .map(video => {
                    let score = 0;

                    // حساب النقاط حسب التصنيفات
                    video.categories.forEach(cat => {
                        const categoryPref = userPreferences.preferredCategories[cat] || 0;
                        score += categoryPref * 2; // وزن أكبر للتصنيفات
                    });

                    // حساب النقاط حسب الكلمات المفتاحية
                    const words = video.title.split(' ');
                    words.forEach(word => {
                        const wordPref = userPreferences.preferredTitles[word] || 0;
                        score += wordPref;
                    });

                    return { video, score };
                })
                .sort((a, b) => b.score - a.score)
                .map(item => item.video);
        }

        // دالة لعرض الفيديوهات
        function displayVideos(videos) {
            const container = document.getElementById('videoContainer');
            const noResults = document.getElementById('noResults');
            const loadMoreBtn = document.getElementById('loadMore');

            let filteredVideos = videos;
            if (currentView === 'favorites') {
                filteredVideos = filteredVideos.filter(video => video.isFavorite);
            } else if (currentView === 'history') { // تصفية وعرض فيديوهات السجل
                // نعرض الفيديوهات من سجل المشاهدة بترتيب ظهورها في watchHistory (الأحدث أولاً بالفعل)
                const historyVideos = watchHistory.map(id => allVideos.find(v => v.id === id)).filter(Boolean);
                filteredVideos = historyVideos; // لا نحتاج للعكس هنا بعد التعديل في addVideoToHistory
            }

            if(filteredVideos.length === 0) {
                container.innerHTML = '';
                noResults.style.display = 'flex';
                noResults.innerHTML = currentView === 'favorites' ?
                    `<i class='bx bx-heart' style="font-size: 3em; margin-bottom: 15px;"></i><p>لا توجد فيديوهات في المفضلة</p>` :
                    currentView === 'history' ?
                    `<i class='bx bx-history' style="font-size: 3em; margin-bottom: 15px;"></i><p>سجل المشاهدة فارغ</p>` :
                    `<i class='bx bx-search-alt' style="font-size: 3em; margin-bottom: 15px;"></i><p>لا توجد فيديوهات مطابقة للبحث</p>`;
                loadMoreBtn.style.display = 'none';
                return;
            }

            // عرض فقط عدد معين من الفيديوهات (للتحميل البطيء)
            const videosToShow = filteredVideos.slice(0, displayedVideos);

            noResults.style.display = 'none';

            // إذا كنا نعرض الفيديوهات الأولى، نمسح المحتوى القديم
            if (displayedVideos <= 20) {
                container.innerHTML = '';
            }

            videosToShow.forEach(video => {
                const videoCard = document.createElement('div');
                videoCard.className = 'video-card';
                videoCard.setAttribute('data-id', video.id); // أضف data-id هنا

                videoCard.innerHTML = `
                    <div class="thumbnail" onclick="playVideo('${video.id}')">
                        <img src="${video.thumbnailUrl}" alt="${video.title}" loading="lazy">
                        <div class="play-icon"><i class="fas fa-play"></i></div>
                        <div class="video-card-btns">
                            <div class="fav-btn ${video.isFavorite ? 'active' : ''}" onclick="toggleFavorite(event, '${video.id}')">
                                <i class="bx ${video.isFavorite ? 'bxs-heart' : 'bx-heart'}"></i>
                            </div>
                            <div class="more-btn" onclick="toggleVideoMenu(event, '${video.id}')">
                                <i class="fas fa-ellipsis-v"></i>
                            </div>
                        </div>
                        <div class="video-menu" id="videoMenu-${video.id}">
                            <button onclick="downloadVideo(event, '${video.videoUrl}', '${video.title}')"><i class="fas fa-download"></i> تحميل</button>
                            <button onclick="markNotInterested(event, '${video.id}')"><i class="fas fa-ban"></i> لا يهمني</button>
                            <button onclick="reportVideo(event, '${video.id}', '${video.title}')"><i class="fas fa-flag"></i> إبلاغ</button>
                            <div class="report-buttons" id="report-buttons-${video.id}" style="display:none;">
                                <button onclick="sendReport(event, '${video.title}', 'الفيديو لا يشتغل')"> الفيديو لا يشتغل</button>
                                <button onclick="sendReport(event, '${video.title}', 'محتوى غير لائق')"> محتوى غير لائق</button>
                            </div>
                            <div class="report-message" id="reportMessage-${video.id}" style="display:none;"></div>
                        </div>
                    </div>
                    <div class="video-info">
                        <div class="video-text">
                            <h3 class="video-title">${video.title}</h3>
                            <div class="video-meta">
                                <span class="video-category">${video.categories[0] || 'عام'}</span>
                                <span class="video-published">• ${video.published}</span>
                            </div>
                        </div>
                    </div>
                `;
                container.appendChild(videoCard);
            });

            // إظهار زر تحميل المزيد فقط إذا كان هناك المزيد للتحميل
            if (displayedVideos < filteredVideos.length && currentView !== 'history') { // لا نحتاج زر تحميل المزيد للسجل
                loadMoreBtn.style.display = 'block';
            } else {
                loadMoreBtn.style.display = 'none';
            }
        }

        // دالة لجلب بيانات المدونة من خلاصة RSS
        async function fetchBlogVideos() {
            const blogUrl = 'https://r-stolen4u.blogspot.com/';
            const videoContainer = document.getElementById('videoContainer');

            videoContainer.innerHTML = `
                <div class="loading">
                    <div class="spinner"></div>
                </div>
            `;

            try {
                const response = await fetch(`https://api.rss2json.com/v1/api.json?rss_url=${encodeURIComponent(blogUrl+'feeds/posts/default')}`);
                const data = await response.json();

                if(data.items && data.items.length > 0) {
                    allVideos = data.items.map(item => {
                        const content = item.content;
                        const videoRegex = /(https?:\/\/[^\s]+\.(mp4|m3u8|avi))/i; // أضفنا avi
                        const imgRegex = /(https?:\/\/[^\s]+\.(jpg|jpeg|png|gif))/i;

                        const videoUrlMatch = content.match(videoRegex);
                        const thumbnailUrlMatch = content.match(imgRegex);

                        const publishedDate = new Date(item.pubDate);
                        const now = new Date();
                        const diffInSeconds = Math.floor((now - publishedDate) / 1000);

                        return {
                            id: item.guid,
                            title: item.title,
                            categories: item.categories || [],
                            videoUrl: videoUrlMatch ? videoUrlMatch[0] : null,
                            thumbnailUrl: thumbnailUrlMatch ? thumbnailUrlMatch[0] : 'https://via.placeholder.com/300x169',
                            published: formatTimeAgo(diffInSeconds),
                            isFavorite: favorites.includes(item.guid)
                        };
                    }).filter(video => video.videoUrl !== null);

                    // تهيئة التحميل البطيء
                    displayedVideos = 20;
                    setupInfiniteScroll();

                    // إذا كان المستخدم قد شاهد أكثر من 10 فيديوهات، نضيف تبويب "لك" مباشرة
                    if (userPreferences.watchedVideos >= 10) {
                        addForYouTab();
                    } else {
                        displayVideos(allVideos);
                    }

                    setupCategories(allVideos);
                }
            } catch (error) {
                console.error('Error fetching blog videos:', error);
                showError();
            }
        }

        function showError() {
            const videoContainer = document.getElementById('videoContainer');
            videoContainer.innerHTML = `
                <div class="no-results" style="display: flex;">
                    <i class='bx bx-error-circle' style="font-size: 3em; margin-bottom: 15px;"></i>
                    <p>حدث خطأ أثناء جلب الفيديوهات</p>
                </div>
            `;
        }

        function setupCategories(videos) {
            const categoriesContainer = document.getElementById('categories');

            // إذا كان هناك تبويب "لك" نتركه في مكانه
            const existingForYouTab = document.querySelector('.category-btn[data-category="forYou"]');

            // مسح التصنيفات الحالية مع الاحتفاظ بتبويب "لك" إذا كان موجوداً
            categoriesContainer.innerHTML = '';
            if (existingForYouTab) {
                categoriesContainer.appendChild(existingForYouTab);
            }

            // إضافة تبويب "الكل" أو "جديد" حسب الحالة
            const allTab = document.createElement('button');
            allTab.className = `category-btn ${!existingForYouTab ? 'active' : ''}`;
            allTab.textContent = existingForYouTab ? 'جديد' : 'الكل';
            allTab.dataset.category = existingForYouTab ? 'new' : 'all';
            allTab.onclick = () => {
                filterByCategory(existingForYouTab ? 'new' : 'all');
            };
            categoriesContainer.appendChild(allTab);

            const allCategories = new Set();

            // جمع جميع التصنيفات الفريدة
            videos.forEach(video => {
                video.categories.forEach(cat => {
                    allCategories.add(cat);
                });
            });

            // إضافة التصنيفات إلى واجهة المستخدم
            allCategories.forEach(cat => {
                const categoryBtn = document.createElement('button');
                categoryBtn.className = 'category-btn';
                categoryBtn.textContent = cat;
                categoryBtn.dataset.category = cat;
                categoryBtn.onclick = () => {
                    filterByCategory(cat);
                };
                categoriesContainer.appendChild(categoryBtn);
            });
        }

        function filterByCategory(category) {
            currentCategory = category;
            const allCategoryBtns = document.querySelectorAll('.category-btn');

            allCategoryBtns.forEach(btn => {
                btn.classList.toggle('active', btn.dataset.category === currentCategory);
            });

            displayedVideos = 20; // إعادة تعيين عدد الفيديوهات المعروضة
            filterVideos();
        }

        function filterVideos() {
            let filteredVideos = allVideos;

            // تطبيق التصفية حسب التبويب الحالي أولاً
            if (currentView === 'favorites') {
                filteredVideos = filteredVideos.filter(video => video.isFavorite);
            } else if (currentView === 'history') {
                const historyVideosData = watchHistory.map(id => allVideos.find(v => v.id === id)).filter(Boolean);
                // هنا لا نحتاج لـ .reverse() لأن addVideoToHistory يضيف للبداية
                filteredVideos = historyVideosData;
            } else if (currentCategory === 'forYou') {
                // إذا كان التبويب "لك" نطبق التوصيات فقط، ولا نطبق البحث
                filteredVideos = getRecommendedVideos();
            } else if (currentCategory !== 'all' && currentCategory !== 'new') {
                filteredVideos = filteredVideos.filter(video =>
                    video.categories.includes(currentCategory)
                );
            }

            // تطبيق البحث فقط إذا لم تكن في عرض "لك"
            if (currentSearch !== '' && currentCategory !== 'forYou') {
                filteredVideos = filteredVideos.filter(video =>
                    video.title.toLowerCase().includes(currentSearch) ||
                    video.categories.some(cat => cat.toLowerCase().includes(currentSearch))
                );
            }

            displayVideos(filteredVideos);
        }

        // دالة تبديل الإعجاب
        function toggleFavorite(event, videoId) {
            if (event) {
                event.stopPropagation(); // منع انتشار الحدث
            }
            const video = allVideos.find(v => v.id === videoId);

            if (video) {
                video.isFavorite = !video.isFavorite;

                if (video.isFavorite) {
                    if (!favorites.includes(videoId)) {
                        favorites.push(videoId);
                    }
                } else {
                    favorites = favorites.filter(id => id !== videoId);
                }

                localStorage.setItem('videoFavorites', JSON.stringify(favorites));

                // تحديث زر القلب في بطاقات الفيديو الرئيسية
                const mainFavBtn = document.querySelector(`.video-card[data-id="${videoId}"] .fav-btn`);
                if (mainFavBtn) {
                    mainFavBtn.classList.toggle('active', video.isFavorite);
                    mainFavBtn.querySelector('i').className = video.isFavorite ? 'bx bxs-heart' : 'bx bx-heart';
                }

                // تحديث زر القلب في بطاقات الفيديو المشابهة
                const relatedFavBtn = document.querySelector(`.related-video[data-id="${videoId}"] .fav-btn`);
                if (relatedFavBtn) {
                    relatedFavBtn.classList.toggle('active', video.isFavorite);
                    relatedFavBtn.querySelector('i').className = video.isFavorite ? 'bx bxs-heart' : 'bx bx-heart';
                }

                // تحديث زر القلب في المشغل إذا كان الفيديو الحالي هو قيد التشغيل
                if (currentVideo && currentVideo.id === videoId) {
                    const playerFavBtn = document.getElementById('playerFavBtn');
                    if (playerFavBtn) {
                        playerFavBtn.classList.toggle('active', video.isFavorite);
                        playerFavBtn.querySelector('i').className = video.isFavorite ? 'bx bxs-heart' : 'bx bx-heart';
                    }
                }

                if (currentView === 'favorites') {
                    filterVideos();
                }
            }
        }


        // دالة لإضافة الفيديو إلى سجل المشاهدة (تم التعديل هنا)
        function addVideoToHistory(videoId) {
            // إزالة الفيديو من أي مكان سابق في السجل (للتأكد من أنه يظهر مرة واحدة فقط)
            watchHistory = watchHistory.filter(id => id !== videoId);
            // إضافة الفيديو إلى بداية السجل (الأحدث)
            watchHistory.unshift(videoId);
            // تحديد حجم السجل (يمكنك تعديله)
            if (watchHistory.length > 50) { // على سبيل المثال، احتفظ بآخر 50 فيديو فقط
                watchHistory = watchHistory.slice(0, 50);
            }
            localStorage.setItem('watchHistory', JSON.stringify(watchHistory));
        }

        function playVideo(videoId) {
            const video = allVideos.find(v => v.id === videoId);
            if (!video) return;

            currentVideo = video;

            // تتبع تفضيلات المستخدم
            trackUserPreferences(video);
            // إضافة الفيديو إلى سجل المشاهدة
            addVideoToHistory(videoId);

            const player = document.getElementById('videoPlayer');
            const playerTitle = document.getElementById('playerTitle');
            const playerContent = document.querySelector('.player-content');

            playerVideo.src = video.videoUrl;
            playerVideo.poster = video.thumbnailUrl;
            playerTitle.textContent = video.title;

            player.style.display = 'flex';
            document.body.style.overflow = 'hidden';

            loadRelatedVideos(video);
            document.getElementById('closePlayer').onclick = closeVideoPlayer;

            // تحديث زر القلب في المشغل
            const playerFavBtn = document.getElementById('playerFavBtn');
            if (playerFavBtn) {
                const isFav = favorites.includes(video.id);
                playerFavBtn.classList.toggle('active', isFav);
                playerFavBtn.querySelector('i').className = isFav ? 'bx bxs-heart' : 'bx bx-heart';
            }

            // تحديث قيم أزرار "لا يهمني" و "إبلاغ" داخل قائمة المشغل
            // هذه الأزرار تستدعي دوال مع `event` الآن
            document.getElementById('playerNotInterestedBtn').setAttribute('onclick', `markNotInterested(event, '${video.id}')`);
            document.getElementById('playerReportBtn').setAttribute('onclick', `reportVideo(event, '${video.id}', '${video.title}')`);
            document.getElementById('playerDownloadBtn').setAttribute('onclick', `downloadVideo(event, '${video.videoUrl}', '${video.title}')`);
            // وأزرار الإبلاغ الفرعية في المشغل
            document.getElementById('playerReportButtons').querySelector('button:first-child').setAttribute('onclick', `sendReport(event, '${video.title}', 'الفيديو لا يشتغل')`);
            document.getElementById('playerReportButtons').querySelector('button:last-child').setAttribute('onclick', `sendReport(event, '${video.title}', 'محتوى غير لائق')`);


            // Reset report message and buttons in player menu
            document.getElementById('playerReportButtons').style.display = 'none';
            document.getElementById('playerReportMessage').style.display = 'none';
            document.getElementById('playerReportMessage').style.color = 'green';
            document.getElementById('playerReportMessage').innerText = 'تم إرسال الإبلاغ بنجاح.';

            // Reset visibility of other buttons when opening player menu
            // ** تم إزالة هذا السطر أو تعديله لعدم إخفاء الأزرار في قائمة المشغل **
            // const playerMoreMenuButtons = document.getElementById('playerMoreMenu').querySelectorAll('button:not(.report-buttons button)');
            // playerMoreMenuButtons.forEach(btn => btn.style.display = '');


            // Scroll to the top of the player
            player.scrollTop = 0; // هذا السطر يرفع سكرول النافذة المنبثقة للاعب إلى الأعلى


            // بدء تشغيل الفيديو الجديد
            playerVideo.play();
        }

        function closeVideoPlayer() {
            playerVideo.pause();
            document.getElementById('videoPlayer').style.display = 'none';
            document.body.style.overflow = 'auto';
            playerVideo.removeAttribute('src'); // إزالة مصدر الفيديو لتوفير الموارد
            playerVideo.load();

            // إزالة أي فئات ملء الشاشة أو تمديد قد تكون متبقية
            body.classList.remove('fullscreen', 'landscape', 'portrait');
            playerVideo.classList.remove('fill-width');

            // إزالة رسالة الخطأ إذا كانت موجودة
            const errorMessage = document.getElementById('playerErrorMessage');
            if (errorMessage && errorMessage.parentNode) {
                errorMessage.parentNode.removeChild(errorMessage);
            }
            // إعادة تفعيل عناصر التحكم وشريط التقدم في حال كانت معطلة بسبب خطأ سابق
            playerControlsContainer.style.opacity = '1';
            playerProgressContainer.style.opacity = '1';
            playerProgressTouchArea.style.pointerEvents = 'auto';
            // إخفاء قائمة المزيد أيضاً
            document.getElementById('playerMoreMenu').classList.remove('active');
        }

        function loadRelatedVideos(currentVideo) {
            const relatedContainer = document.getElementById('relatedVideos');
            relatedContainer.innerHTML = '';

            const relatedVideos = allVideos.filter(video => {
                return video.id !== currentVideo.id &&
                       video.categories.some(cat => currentVideo.categories.includes(cat));
            }).slice(0, 6);

            if (relatedVideos.length === 0) {
                const randomVideos = allVideos.filter(v => v.id !== currentVideo.id)
                                              .sort(() => 0.5 - Math.random())
                                              .slice(0, 4);
                displayRelatedVideos(randomVideos);
            } else {
                displayRelatedVideos(relatedVideos);
            }
        }

        // دالة عرض الفيديوهات المشابهة المحدثة
        function displayRelatedVideos(videos) {
            const relatedContainer = document.getElementById('relatedVideos');

            videos.forEach(video => {
                const relatedVideo = document.createElement('div');
                relatedVideo.className = 'related-video';
                relatedVideo.setAttribute('data-id', video.id); // أضف data-id هنا

                // لقد قمت بفصل النقر لفتح الفيديو ليتم فقط على الصورة المصغرة،
                // وذلك لتجنب تداخل النقر مع زر الإعجاب الجديد
                relatedVideo.innerHTML = `
                    <div class="related-thumbnail" onclick="playVideo('${video.id}')">
                        <img src="${video.thumbnailUrl}" alt="${video.title}">
                        <div class="related-play-icon"><i class="fas fa-play"></i></div>
                        <div class="related-video-btns">
                            <div class="fav-btn ${video.isFavorite ? 'active' : ''}" onclick="toggleFavorite(event, '${video.id}')">
                                <i class="bx ${video.isFavorite ? 'bxs-heart' : 'bx-heart'}"></i>
                            </div>
                            <div class="more-btn" onclick="toggleVideoMenu(event, '${video.id}')">
                                <i class="fas fa-ellipsis-v"></i>
                            </div>
                        </div>
                        <div class="video-menu" id="videoMenu-${video.id}-related">
                            <button onclick="downloadVideo(event, '${video.videoUrl}', '${video.title}')"><i class="fas fa-download"></i> تحميل</button>
                            <button onclick="markNotInterested(event, '${video.id}')"><i class="fas fa-ban"></i> لا يهمني</button>
                            <button onclick="reportVideo(event, '${video.id}', '${video.title}')"><i class="fas fa-flag"></i> إبلاغ</button>
                            <div class="report-buttons" id="report-buttons-${video.id}-related" style="display:none;">
                                <button onclick="sendReport(event, '${video.title}', 'الفيديو لا يشتغل')"> الفيديو لا يشتغل</button>
                                <button onclick="sendReport(event, '${video.title}', 'محتوى غير لائق')"> محتوى غير لائق</button>
                            </div>
                            <div class="report-message" id="reportMessage-${video.id}-related" style="display:none;"></div>
                        </div>
                    </div>
                    <div class="related-info">
                        <h3 class="related-title">${video.title}</h3>
                        <div class="related-meta">
                            <span class="related-category">${video.categories[0] || 'عام'}</span>
                            <span class="related-published">• ${video.published}</span>
                        </div>
                    </div>
                `;
                relatedContainer.appendChild(relatedVideo);
            });
        }

        function switchView(view) {
            currentView = view;

            document.querySelectorAll('.nav-item').forEach(item => {
                item.classList.remove('active');
            });
            document.getElementById(`nav${view.charAt(0).toUpperCase() + view.slice(1)}`).classList.add('active');

            // إخفاء تبويبات الفئات عند عرض المفضلة أو السجل
            const categoriesContainer = document.getElementById('categories');
            categoriesContainer.style.display = (view === 'favorites' || view === 'history') ? 'none' : 'flex';

            currentSearch = '';
            document.getElementById('searchInput').value = '';
            currentCategory = 'all';
            document.querySelectorAll('.category-btn').forEach(btn => {
                btn.classList.toggle('active', btn.dataset.category === 'all' || btn.dataset.category === 'new');
            });

            displayedVideos = 20;
            filterVideos();
        }

        document.getElementById('searchInput').addEventListener('input', function(e) {
            currentSearch = e.target.value.trim().toLowerCase();
            displayedVideos = 20;
            filterVideos();
        });

        document.getElementById('refreshBtn').addEventListener('click', function() {
            this.classList.add('refreshing');
            setTimeout(() => {
                this.classList.remove('refreshing');
                displayedVideos = 20;
                fetchBlogVideos();
            }, 1000);
        });

        document.getElementById('navChannels').addEventListener('click', () => {
            window.location.href = 'go:yyff';
        });

        document.getElementById('navVideos').addEventListener('click', () => {
            switchView('videos');
        });

        document.getElementById('navFavorites').addEventListener('click', () => {
            switchView('favorites');
        });

        // إضافة حدث لزر سجل المشاهدة
        document.getElementById('navHistory').addEventListener('click', () => {
            switchView('history');
        });

        // عند تحميل الصفحة
        document.addEventListener('DOMContentLoaded', () => {
            fetchBlogVideos();

            // إذا كان المستخدم قد شاهد أكثر من 10 فيديوهات، نضيف تبويب "لك" مباشرة
            if (userPreferences.watchedVideos >= 10) {
                addForYouTab();
            }
        });

        // سكريبت المشغل والقوائم العائمة
        (function() {
            // دالة التحكم بالقائمة العائمة للفيديوهات (القائمة التي تظهر عند الضغط على زر +)
            function toggleVideoMenu(event, videoId) {
                event.stopPropagation(); // منع انتشار الحدث إلى العناصر الأبوية
                let menu;
                let isPlayerHeaderMenu = false;
                let reportButtons;
                let reportMessage;
                let otherButtons; // مجموعة الأزرار الأخرى

                // إغلاق جميع قوائم الإبلاغ والرسائل قبل فتح قائمة جديدة
                document.querySelectorAll('.report-buttons').forEach(rb => rb.style.display = 'none');
                document.querySelectorAll('.report-message').forEach(rm => rm.style.display = 'none');

                // إخفاء جميع القوائم الأخرى المفتوحة وإعادة الأزرار الأصلية
                document.querySelectorAll('.video-menu.active, .player-more-menu.active').forEach(m => {
                    if (m.id !== (event.currentTarget.closest('.player-header') ? 'playerMoreMenu' : `videoMenu-${videoId}`) && m.id !== (event.currentTarget.closest('.related-video') ? `videoMenu-${videoId}-related` : `videoMenu-${videoId}`)) {
                         m.classList.remove('active');
                         // إعادة إظهار الأزرار الأصلية عند إغلاق قائمة أخرى (هذا الجزء يؤثر على قوائم الفيديو العادية والمشابهة)
                        if (!m.id.includes('playerMoreMenu')) { // لا تؤثر على قائمة المشغل
                            m.querySelectorAll('button:not(.report-buttons button)').forEach(btn => btn.style.display = '');
                        }
                        // إخفاء أزرار الإبلاغ في القوائم الأخرى
                        m.querySelectorAll('.report-buttons').forEach(rb => rb.style.display = 'none');
                        m.querySelectorAll('.report-message').forEach(rm => rm.style.display = 'none');
                    }
                });

                // إذا كان النقر على زر "المزيد" في رأس المشغل
                if (event.currentTarget.id === 'playerHeaderMoreBtn') {
                    menu = document.getElementById('playerMoreMenu');
                    isPlayerHeaderMenu = true;
                    reportButtons = document.getElementById('playerReportButtons');
                    reportMessage = document.getElementById('playerReportMessage');
                    // لا تخفِ أزرار أخرى في قائمة المشغل
                    // otherButtons = menu.querySelectorAll('button:not(#playerReportBtn)'); // تم إلغاء هذا السطر
                } else {
                    // إذا كان النقر على زر "المزيد" في بطاقة فيديو عادية أو مشابهة
                    const menuId = event.currentTarget.closest('.related-video') ? `videoMenu-${videoId}-related` : `videoMenu-${videoId}`;
                    menu = document.getElementById(menuId);
                    reportButtons = document.getElementById(`report-buttons-${videoId}` + (event.currentTarget.closest('.related-video') ? '-related' : ''));
                    reportMessage = document.getElementById(`reportMessage-${videoId}` + (event.currentTarget.closest('.related-video') ? '-related' : ''));
                    // هنا يتم إخفاء الأزرار الأخرى
                    otherButtons = menu.querySelectorAll('button:not(.report-buttons button):not([onclick*="reportVideo"])');
                }

                // تبديل حالة القائمة الحالية (إظهار/إخفاء)
                const isActive = menu.classList.toggle('active');

                // إذا تم إخفاء القائمة (أي تم النقر عليها لإغلاقها)
                if (!isActive) {
                    // إعادة إظهار الأزرار الأصلية فقط إذا لم تكن قائمة المشغل
                    if (otherButtons && !isPlayerHeaderMenu) {
                        otherButtons.forEach(btn => btn.style.display = '');
                    }
                    // إخفاء أزرار الإبلاغ ورسالة الإبلاغ
                    if (reportButtons) reportButtons.style.display = 'none';
                    if (reportMessage) reportMessage.style.display = 'none';
                }


                // إذا كانت القائمة هي قائمة المشغل في رأس المشغل
                if (isPlayerHeaderMenu) {
                    const moreBtnRect = event.currentTarget.getBoundingClientRect(); // موقع زر +
                    const playerHeaderRect = document.querySelector('.player-header').getBoundingClientRect(); // موقع رأس المشغل

                    // لتكون الزاوية العلوية اليمنى للقائمة محاذية تمامًا للزاوية العلوية اليمنى لزر "+"
                    // نقوم بضبط 'right' و 'top' بناءً على إحداثيات الزر.
                    // 'right' سيكون على بعد مسافة (moreBtnRect.right - playerHeaderRect.right) من يمين 'playerHeaderRect'
                    // بالإضافة إلى بعض البادينغ لضمان الظهور الصحيح في RTL.
                    menu.style.right = `${(playerHeaderRect.width - moreBtnRect.right) + playerHeaderRect.left}px`;
                    menu.style.top = `${moreBtnRect.bottom - playerHeaderRect.top + 5}px`;
                    menu.style.left = 'unset'; // تأكد من إزالة left
                } else {
                    // حساب موضع القائمة لبطاقات الفيديو العادية والمشابهة (لتظهر على الجانب الآخر - اليسار)
                    const moreBtnRect = event.currentTarget.getBoundingClientRect();
                    const thumbnailRect = (event.currentTarget.closest('.thumbnail') || event.currentTarget.closest('.related-thumbnail')).getBoundingClientRect();
                    const menuWidth = menu.offsetWidth; // عرض القائمة

                    menu.style.top = `${moreBtnRect.bottom - thumbnailRect.top + 5}px`; // أسفل الزر قليلاً
                    // ضبط `left` ليكون بجانب الزر من اليسار
                    menu.style.left = `${moreBtnRect.left - thumbnailRect.left - (menuWidth - moreBtnRect.width)}px`;
                    menu.style.right = 'unset'; // تأكد من عدم وجود right
                }
            }
            window.toggleVideoMenu = toggleVideoMenu; // لجعلها متاحة عالمياً (لزر onclick)

            // دالة تحميل الفيديو (لزر التحميل)
            function downloadVideo(event, url, title) {
                if (event) {
                    event.stopPropagation(); // منع تفاعل المشغل أو الصفحة
                }
                const link = document.createElement('a');
                link.href = url;
                link.download = `${title}.${url.split('.').pop()}`; // اسم الملف + الامتداد
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                // إغلاق القائمة بعد التحميل (لجميع القوائم)
                document.querySelectorAll('.video-menu.active, .player-more-menu.active').forEach(m => {
                    m.classList.remove('active');
                    // إعادة إظهار الأزرار الأصلية فقط إذا لم تكن قائمة المشغل
                    if (!m.id.includes('playerMoreMenu')) {
                        m.querySelectorAll('button:not(.report-buttons button)').forEach(btn => btn.style.display = '');
                    }
                    m.querySelectorAll('.report-buttons').forEach(rb => rb.style.display = 'none');
                    m.querySelectorAll('.report-message').forEach(rm => rm.style.display = 'none');
                });
            }
            window.downloadVideo = downloadVideo; // لجعلها متاحة عالمياً

            // دالة "لا يهمني"
            function markNotInterested(event, videoId) {
                if (event) {
                    event.stopPropagation(); // منع تفاعل المشغل أو الصفحة
                }
                console.log(`Marked ${videoId} as not interested.`);
                // إزالة الفيديو من قائمة allVideos
                allVideos = allVideos.filter(video => video.id !== videoId);
                // إعادة ضبط عدد الفيديوهات المعروضة لضمان عرض فيديوهات جديدة إذا لزم الأمر
                displayedVideos = Math.min(displayedVideos, allVideos.length);
                filterVideos(); // إعادة عرض قائمة الفيديوهات المفلترة
                closeVideoPlayer(); // إغلاق المشغل إذا كان الفيديو الذي تم إخفاؤه قيد التشغيل
                // إغلاق القوائم العائمة (لجميع القوائم)
                document.querySelectorAll('.video-menu.active, .player-more-menu.active').forEach(m => {
                    m.classList.remove('active');
                    // إعادة إظهار الأزرار الأصلية فقط إذا لم تكن قائمة المشغل
                    if (!m.id.includes('playerMoreMenu')) {
                        m.querySelectorAll('button:not(.report-buttons button)').forEach(btn => btn.style.display = '');
                    }
                    m.querySelectorAll('.report-buttons').forEach(rb => rb.style.display = 'none');
                    m.querySelectorAll('.report-message').forEach(rm => rm.style.display = 'none');
                });
            }
            window.markNotInterested = markNotInterested; // لجعلها متاحة عالمياً

            // دالة الإبلاغ عن الفيديو
            function reportVideo(event, videoId, videoTitle) {
                if (event) {
                    event.stopPropagation(); // منع تفاعل المشغل أو الصفحة
                }

                // إخفاء جميع قوائم الإبلاغ والرسائل أولاً
                document.querySelectorAll('.report-buttons').forEach(rb => rb.style.display = 'none');
                document.querySelectorAll('.report-message').forEach(rm => rm.style.display = 'none');

                let reportButtonsElement;
                let reportMessageElement;
                let otherButtons; // لتخزين حاوية الأزرار الأخرى

                // تحديد أزرار ورسالة الإبلاغ بناءً على مكان النقر
                if (document.getElementById('playerMoreMenu').classList.contains('active')) { // إذا كانت قائمة المشغل مفتوحة
                    reportButtonsElement = document.getElementById('playerReportButtons');
                    reportMessageElement = document.getElementById('playerReportMessage');
                    // في قائمة المشغل، لا تخفِ أزرار "تحميل" و "لا يهمني"
                    // otherButtons = null; // تم إلغاء هذا السطر
                } else { // For main video cards or related videos
                    const isRelated = event.currentTarget.closest('.related-video');
                    const menuId = `videoMenu-${videoId}` + (isRelated ? '-related' : '');
                    const menu = document.getElementById(menuId);

                    reportButtonsElement = document.getElementById(`report-buttons-${videoId}` + (isRelated ? '-related' : ''));
                    reportMessageElement = document.getElementById(`reportMessage-${videoId}` + (isRelated ? '-related' : ''));
                    // هنا يتم إخفاء الأزرار الأخرى في قوائم الفيديو العادية والمشابهة
                    otherButtons = menu.querySelectorAll('button:not(.report-buttons button):not([onclick*="reportVideo"])');
                }

                // إظهار أزرار الإبلاغ وإخفاء رسالة الإبلاغ (في حال كانت ظاهرة من قبل)
                if (reportButtonsElement) {
                    reportButtonsElement.style.display = 'flex'; // Use flex for column layout
                }
                if (reportMessageElement) {
                    reportMessageElement.style.display = 'none';
                    reportMessageElement.innerText = 'تم إرسال الإبلاغ بنجاح.'; // Reset default success message
                    reportMessageElement.style.color = 'green';
                }

                // إخفاء الأزرار الأخرى (تحميل، لا يهمني) فقط في قوائم الفيديو العادية والمشابهة
                if (otherButtons) { // يتم التأكد من وجود otherButtons قبل محاولة إخفائها
                    otherButtons.forEach(btn => {
                        btn.style.display = 'none';
                    });
                }
            }
            window.reportVideo = reportVideo; // لجعلها متاحة عالمياً

            // دالة إرسال الإبلاغ (المدمجة)
            function sendReport(event, videoTitle, reason) {
                if (event) {
                    event.stopPropagation(); // منع تفاعل المشغل أو الصفحة
                }

                const formData = new FormData();
                formData.append('name', reason); // نضع السبب في حقل الاسم
                formData.append('email', reason + '@Report.com'); // وهمي، لا يهم لأنه سيصل لك فقط
                formData.append('message', `Video Title: ${videoTitle}`); // عنوان الفيديو

                // تحديد عناصر الرسالة والأزرار بناءً على ما إذا كانت من المشغل أو البطاقات
                let reportMessageElement;
                let reportButtonsElement;
                let parentMenu; // القائمة الأم

                if (document.getElementById('playerMoreMenu').classList.contains('active')) {
                    // إذا كانت القائمة النشطة هي قائمة المشغل
                    reportMessageElement = document.getElementById('playerReportMessage');
                    reportButtonsElement = document.getElementById('playerReportButtons');
                    parentMenu = document.getElementById('playerMoreMenu');
                } else {
                    // ابحث عن القائمة النشطة بين بطاقات الفيديو الرئيسية والمشابهة
                    const activeMenu = document.querySelector('.video-menu.active');
                    if (activeMenu) {
                        const videoId = activeMenu.id.replace('videoMenu-', '').replace('-related', '');
                        const isRelated = activeMenu.id.includes('-related');
                        reportMessageElement = document.getElementById(`reportMessage-${videoId}` + (isRelated ? '-related' : ''));
                        reportButtonsElement = document.getElementById(`report-buttons-${videoId}` + (isRelated ? '-related' : ''));
                        parentMenu = activeMenu;
                    }
                }

                fetch('https://formsubmit.co/ajax/f4f9c4bf916f4380e588b92aff447ef3', {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'Accept': 'application/json'
                    }
                })
                .then(response => {
                    if (response.ok) {
                        if (reportMessageElement) {
                            reportMessageElement.innerText = 'تم إرسال الإبلاغ بنجاح.';
                            reportMessageElement.style.color = 'green';
                            reportMessageElement.style.display = 'block';
                        }
                        if (reportButtonsElement) {
                            reportButtonsElement.style.display = 'none';
                        }
                        // إخفاء أزرار الإبلاغ الفرعية فقط بعد الإرسال
                        if (parentMenu) {
                            parentMenu.querySelectorAll('.report-buttons button').forEach(btn => btn.style.display = 'none');
                        }
                        // في قوائم الفيديو العادية والمشابهة، أعد إظهار الأزرار الأخرى
                        if (parentMenu && !parentMenu.id.includes('playerMoreMenu')) {
                            parentMenu.querySelectorAll('button:not(.report-buttons button)').forEach(btn => btn.style.display = '');
                        }

                    } else {
                        response.json().then(data => {
                            console.error('FormSubmit error:', data);
                            if (reportMessageElement) {
                                reportMessageElement.innerText = `حدث خطأ أثناء الإرسال: ${data.message || 'غير معروف'}`;
                                reportMessageElement.style.color = 'red';
                                reportMessageElement.style.display = 'block';
                            }
                        }).catch(error => {
                             console.error('Error parsing FormSubmit error response:', error);
                            if (reportMessageElement) {
                                reportMessageElement.innerText = 'حدث خطأ أثناء الإرسال.';
                                reportMessageElement.style.color = 'red';
                                reportMessageElement.style.display = 'block';
                            }
                        });
                    }
                })
                .catch(error => {
                    console.error('Network error during report submission:', error);
                    if (reportMessageElement) {
                        reportMessageElement.innerText = 'تعذر الاتصال بالخادم.';
                        reportMessageElement.style.color = 'red';
                        reportMessageElement.style.display = 'block';
                    }
                });
            }
            window.sendReport = sendReport; // لجعلها متاحة عالمياً

            // إغلاق أي قوائم عائمة عند النقر خارجها
            document.addEventListener('click', (event) => {
                // إغلاق قوائم الفيديو الرئيسية والمشابهة
                document.querySelectorAll('.video-menu.active').forEach(m => {
                    if (!event.target.closest('.more-btn') && !event.target.closest('.video-menu')) {
                        m.classList.remove('active');
                        // إعادة إظهار الأزرار الأصلية عند إغلاق القائمة
                        m.querySelectorAll('button:not(.report-buttons button)').forEach(btn => btn.style.display = '');
                        // إخفاء أزرار الإبلاغ والرسالة في هذه القوائم
                        m.querySelectorAll('.report-buttons').forEach(rb => rb.style.display = 'none');
                        m.querySelectorAll('.report-message').forEach(rm => rm.style.display = 'none');
                    }
                });

                // إغلاق قائمة المشغل العائمة
                const playerMoreMenu = document.getElementById('playerMoreMenu');
                if (playerMoreMenu && playerMoreMenu.classList.contains('active')) {
                    if (!event.target.closest('#playerHeaderMoreBtn') && !event.target.closest('#playerMoreMenu')) {
                        playerMoreMenu.classList.remove('active');
                        // في قائمة المشغل، لا تخفِ أزرار "تحميل" و "لا يهمني" عند الإغلاق
                        // playerMoreMenu.querySelectorAll('button:not(.report-buttons button)').forEach(btn => btn.style.display = ''); // تم إزالة هذا
                        // إخفاء أزرار الإبلاغ والرسالة في قائمة المشغل
                        document.getElementById('playerReportButtons').style.display = 'none';
                        document.getElementById('playerReportMessage').style.display = 'none';
                    }
                }
            });

            // تكييف الحجم للهاتف
            function adjustForMobilePlayer() {
                if (/Android|webOS|iPhone|iPad|Ipod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
                    document.documentElement.style.setProperty('--progress-height', '10px');
                    document.documentElement.style.setProperty('--control-height', '80px');
                    document.documentElement.style.setProperty('--touch-area-height', '40px');
                }
            }
            adjustForMobilePlayer();

            // تشغيل/إيقاف الفيديو بالنقر
            function togglePlayPlayer() {
                if (playerVideo.paused) {
                    playerVideo.play();
                } else {
                    playerVideo.pause();
                }
                showPulseEffectPlayer();
            }

            playerVideoWrapper.addEventListener('click', function(e) {
                // التأكد من أن النقر ليس على عناصر التحكم أو شريط التقدم أو رسالة الخطأ
                if (!e.target.closest('.player-controls-container, .player-progress-container, .player-progress-touch-area, .player-control-btn, #playerErrorMessage, .player-video-actions, .player-more-menu')) {
                    togglePlayPlayer();
                }
            });

            function showPulseEffectPlayer() {
                playerPulseEffect.style.display = 'block';
                playerPulseEffect.style.animation = 'none';
                void playerPulseEffect.offsetWidth;
                playerPulseEffect.style.animation = 'pulse 0.6s ease-out forwards';

                setTimeout(() => {
                    playerPulseEffect.style.display = 'none';
                }, 600);
            }

            // النقر المزدوج للتقدم/التراجع
            let lastTapPlayer = 0;
            playerVideoWrapper.addEventListener('touchend', function(e) {
                // تجنب معالجة النقر المزدوج إذا كان هناك رسالة خطأ معروضة
                if (document.getElementById('playerErrorMessage')) return;

                const currentTime = new Date().getTime();
                const tapLength = currentTime - lastTapPlayer;

                if (tapLength < 300 && tapLength > 0) {
                    const rect = playerVideoWrapper.getBoundingClientRect();
                    const clickPosition = (e.changedTouches[0].clientX - rect.left) / rect.width;

                    // تم عكس الشروط هنا لجعل الأزرار تعمل بشكل صحيح
                    if (clickPosition < 0.4) { // انقر على اليسار (ثلث الشاشة الأيسر) للتأخير
                        playerVideo.currentTime = Math.max(0, playerVideo.currentTime - 10);
                        showJumpEffectPlayer(playerJumpBackward);
                    } else if (clickPosition > 0.6) { // انقر على اليمين (ثلث الشاشة الأيمن) للتقديم
                        playerVideo.currentTime += 10;
                        showJumpEffectPlayer(playerJumpForward);
                    }
                }
                lastTapPlayer = currentTime;
            });

            function showJumpEffectPlayer(element) {
                element.style.animation = 'none';
                void element.offsetWidth;
                element.style.animation = 'jumpIndicator 0.8s';
            }

            // التحكم بالسحب على شريط التقدم
            playerProgressTouchArea.addEventListener('touchstart', handleProgressStartPlayer);
            playerProgressTouchArea.addEventListener('mousedown', handleProgressStartPlayer);

            function handleProgressStartPlayer(e) {
                // تجنب التفاعل مع شريط التقدم إذا كان هناك رسالة خطأ
                if (document.getElementById('playerErrorMessage')) return;

                playerProgressContainer.classList.add('active');
                updateProgressBarPlayer(e);

                document.addEventListener('mousemove', updateProgressBarPlayer);
                document.addEventListener('touchmove', updateProgressBarPlayer);
                document.addEventListener('mouseup', handleProgressEndPlayer);
                document.addEventListener('touchend', handleProgressEndPlayer);
            }

            function updateProgressBarPlayer(e) {
                const rect = playerProgressContainer.getBoundingClientRect();
                let pos = 0;

                if (e.type.includes('touch')) {
                    pos = (e.touches[0].clientX - rect.left) / rect.width;
                } else {
                    pos = (e.clientX - rect.left) / rect.width;
                }

                pos = Math.max(0, Math.min(1, pos));

                // تحديث المؤشر
                const previewTime = pos * playerVideo.duration;
                playerTimePreview.textContent = formatTime(previewTime);
                playerTimePreview.style.left = `${pos * 100}%`;
                playerPreviewLine.style.left = `${pos * 100}%`;

                // إذا كان المستخدم يسحب
                if (e.type === 'mousemove' || e.type === 'touchmove') {
                    playerVideo.currentTime = previewTime;
                }
            }

            function handleProgressEndPlayer(e) {
                playerProgressContainer.classList.remove('active');

                document.removeEventListener('mousemove', updateProgressBarPlayer);
                document.removeEventListener('touchmove', updateProgressBarPlayer);
                document.removeEventListener('mouseup', handleProgressEndPlayer);
                document.removeEventListener('touchend', handleProgressEndPlayer);
            }

            // ملء الشاشة وتدوير الهاتف
            function toggleFullscreenPlayer() {
                if (!document.fullscreenElement) {
                    playerVideoWrapper.requestFullscreen()
                        .then(() => {
                            body.classList.add('fullscreen');
                            checkOrientationPlayer();
                            // قفل الشاشة في الوضع الأفقي على الجوال إذا أمكن
                            if (screen.orientation && screen.orientation.lock) {
                                screen.orientation.lock('landscape').catch(e => {
                                    console.log('Orientation lock not supported or failed:', e);
                                });
                            }
                            // عند الدخول في وضع ملء الشاشة الأفقي، اجعل الفيديو يملأ العرض افتراضيًا
                            if (body.classList.contains('landscape')) {
                                playerVideo.classList.add('fill-width');
                            }
                        })
                        .catch(err => {
                            console.error('Error attempting to enable fullscreen:', err);
                        });
                } else {
                    document.exitFullscreen()
                        .then(() => {
                            body.classList.remove('fullscreen', 'landscape', 'portrait');
                            playerVideo.classList.remove('fill-width'); // تأكد من إزالة فئة التمدد
                        });
                }
            }

            // التحقق من اتجاه الشاشة
            function checkOrientationPlayer() {
                // إزالة جميع فئات الاتجاه أولاً
                body.classList.remove('landscape', 'portrait');

                if (screen.orientation && screen.orientation.type) {
                    if (screen.orientation.type.includes('landscape')) {
                        body.classList.add('landscape');
                    } else {
                        body.classList.add('portrait');
                    }
                } else { // Fallback for older browsers
                    if (window.innerWidth > window.innerHeight) {
                        body.classList.add('landscape');
                    } else {
                        body.classList.add('portrait');
                    }
                }

                // ضبط وضع التمدد بناءً على الاتجاه الحالي
                if (body.classList.contains('fullscreen')) {
                    if (body.classList.contains('landscape')) {
                        playerVideo.classList.add('fill-width');
                    } else {
                        playerVideo.classList.remove('fill-width');
                    }
                }
            }

            // تغيير أيقونة ملء الشاشة عند التغيير
            document.addEventListener('fullscreenchange', function() {
                if (!document.fullscreenElement) {
                    // عند الخروج من ملء الشاشة
                    body.classList.remove('fullscreen', 'landscape', 'portrait');
                    playerFullscreenBtn.innerHTML = '<i class="fas fa-expand"></i>';
                    playerVideo.classList.remove('fill-width'); // تأكد من إزالة فئة التمدد
                } else {
                    // عند الدخول في ملء الشاشة
                    body.classList.add('fullscreen');
                    playerFullscreenBtn.innerHTML = '<i class="fas fa-compress"></i>';
                    checkOrientationPlayer(); // تحديث الاتجاه وضبط الفيديو
                }
            });

            // تغيير اتجاه الشاشة
            window.addEventListener('orientationchange', checkOrientationPlayer);
            window.addEventListener('resize', checkOrientationPlayer);

            // زر التمديد
            playerStretchBtn.addEventListener('click', function() {
                playerVideo.classList.toggle('fill-width'); // استخدم fill-width بدلاً من stretched
                playerStretchBtn.innerHTML = playerVideo.classList.contains('fill-width') ?
                    '<i class="fas fa-compress-alt"></i>' : '<i class="fas fa-expand-alt"></i>';
            });

            // زر ملء الشاشة
            playerFullscreenBtn.addEventListener('click', toggleFullscreenPlayer);

            // تحديث الوقت
            playerVideo.addEventListener('timeupdate', function() {
                const progress = (playerVideo.currentTime / playerVideo.duration) * 100;
                playerProgressBar.style.width = `${progress}%`;
                // تجنب ظهور NaN عن طريق التحقق من أن duration ليس NaN
                if (!isNaN(playerVideo.duration)) {
                    playerTimeDisplay.textContent = `${formatTime(playerVideo.currentTime)} / ${formatTime(playerVideo.duration)}`;
                } else {
                    playerTimeDisplay.textContent = `00:00 / 00:00`; // أبقيه 00:00 / 00:00 إذا كانت المدة غير معروفة
                }
            });

            // زر كتم الصوت
            playerMuteBtn.addEventListener('click', function() {
                if (playerVideo.volume > 0) {
                    playerVideo.volume = 0;
                    playerMuteBtn.innerHTML = '<i class="fas fa-volume-mute"></i>';
                } else {
                    playerVideo.volume = 1;
                    playerMuteBtn.innerHTML = '<i class="fas fa-volume-up"></i>';
                }
            });

            // تهيئة الوقت عند تحميل البيانات
            playerVideo.addEventListener('loadedmetadata', function() {
                // تأكد من أن المدة رقم صحيح قبل التنسيق
                if (!isNaN(playerVideo.duration)) {
                    playerTimeDisplay.textContent = `00:00 / ${formatTime(playerVideo.duration)}`;
                } else {
                    playerTimeDisplay.textContent = `00:00 / 00:00`;
                }
            });

            // معالجة الأخطاء
            playerVideo.addEventListener('error', function() {
                console.error('Video loading error:', playerVideo.error);
                playerVideo.pause(); // أوقف التشغيل
                playerVideo.removeAttribute('src'); // إزالة مصدر الفيديو
                playerVideo.load(); // إعادة تحميل الفيديو

                // إظهار رسالة خطأ في منتصف المشغل
                const errorMessage = document.createElement('div');
                errorMessage.id = 'playerErrorMessage';
                errorMessage.style.cssText = `
                    position: absolute;
                    top: 50%;
                    left: 50%;
                    transform: translate(-50%, -50%);
                    background: rgba(0, 0, 0, 0.7);
                    color: white;
                    padding: 20px 30px;
                    border-radius: 10px;
                    text-align: center;
                    font-size: 1.1em;
                    z-index: 10000000;
                    display: flex;
                    flex-direction: column;
                    align-items: center;
                    justify-content: center;
                `;
                errorMessage.innerHTML = `
                    <i class="fas fa-exclamation-triangle" style="font-size: 2.5em; margin-bottom: 10px; color: #ffeb3b;"></i>
                    <p style="direction: rtl;">تعذر تحميل الفيديو.</p>

                `;
                playerVideoWrapper.appendChild(errorMessage);

                // إخفاء عناصر التحكم وشريط التقدم
                playerControlsContainer.style.opacity = '0';
                playerProgressContainer.style.opacity = '0';
                playerProgressTouchArea.style.pointerEvents = 'none'; // تعطيل التفاعل

                // تحديث عرض الوقت إلى 00:00 / 00:00
                playerTimeDisplay.textContent = `00:00 / 00:00`;

                // إخفاء رسالة الخطأ بعد 5 ثوانٍ أو عند محاولة تشغيل جديدة
                setTimeout(() => {
                    if (errorMessage.parentNode) {
                        errorMessage.parentNode.removeChild(errorMessage);
                        playerControlsContainer.style.opacity = '1';
                        playerProgressContainer.style.opacity = '1';
                        playerProgressTouchArea.style.pointerEvents = 'auto'; // إعادة تمكين التفاعل
                    }
                }, 5000);
            });

            // تنسيق الوقت (دقائق:ثواني)
            function formatTime(seconds) {
                if (isNaN(seconds) || seconds < 0) return '00:00'; // التأكد من أن الوقت ليس NaN وسالب
                const mins = Math.floor(seconds / 60);
                const secs = Math.floor(seconds % 60);
                return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
            }

            // إظهار/إخفاء عناصر التحكم
            let controlsTimeoutPlayer;
            const playerVideoActions = document.querySelector('.player-video-actions'); // Get the action buttons container

            function hideControlsPlayer() {
                controlsTimeoutPlayer = setTimeout(() => {
                    if (!playerVideo.paused) {
                        playerControlsContainer.style.opacity = '0';
                        playerProgressContainer.classList.add('hidden-controls');
                        playerVideoActions.style.opacity = '0'; // إخفاء أزرار الإجراءات
                        playerVideoActions.style.pointerEvents = 'none'; // تعطيل التفاعل
                        // إخفاء قائمة المزيد أيضاً
                        document.getElementById('playerMoreMenu').classList.remove('active');
                    }
                }, 3000);
            }

            function showControlsPlayer() {
                clearTimeout(controlsTimeoutPlayer);
                playerControlsContainer.style.opacity = '1';
                playerProgressContainer.classList.remove('hidden-controls');
                playerVideoActions.style.opacity = '1'; // إظهار أزرار الإجراءات
                playerVideoActions.style.pointerEvents = 'auto'; // تفعيل التفاعل
                hideControlsPlayer();
            }

            playerVideoWrapper.addEventListener('touchstart', showControlsPlayer);
            playerVideoWrapper.addEventListener('mousemove', showControlsPlayer);
            playerVideo.addEventListener('play', showControlsPlayer);
            playerVideo.addEventListener('pause', showControlsPlayer); // لعرض التحكم عند الإيقاف
            hideControlsPlayer();

            // ربط أزرار المشغل
            const playerHeaderMoreBtn = document.getElementById('playerHeaderMoreBtn'); // زر الثلاث نقاط الجديد في رأس المشغل
            const playerMoreMenu = document.getElementById('playerMoreMenu');
            const playerFavBtn = document.getElementById('playerFavBtn'); // زر القلب في المشغل (مستقل الآن)
            const playerDownloadBtn = document.getElementById('playerDownloadBtn');
            const playerReportBtn = document.getElementById('playerReportBtn');
            const playerNotInterestedBtn = document.getElementById('playerNotInterestedBtn');

            // حدث النقر على زر "المزيد" (الزائد) في رأس المشغل
            if (playerHeaderMoreBtn) {
                playerHeaderMoreBtn.addEventListener('click', (event) => {
                    toggleVideoMenu(event, currentVideo ? currentVideo.id : null); // استدعاء دالة toggleVideoMenu
                });
            }

            // حدث النقر على زر "إضافة للمفضلة" في المشغل (مستقل)
            playerFavBtn.addEventListener('click', (event) => { // يجب تمرير event
                if (currentVideo) {
                    toggleFavorite(event, currentVideo.id); // تمرير event لـ toggleFavorite
                }
            });

            playerDownloadBtn.addEventListener('click', (event) => { // يجب تمرير event
                if (currentVideo) {
                    downloadVideo(event, currentVideo.videoUrl, currentVideo.title);
                    // playerMoreMenu.classList.remove('active'); // إغلاق القائمة بعد النقر - تم إزالته لتجنب إغلاق كل القوائم
                }
            });

            playerReportBtn.addEventListener('click', (event) => { // يجب تمرير event
                if (currentVideo) {
                    reportVideo(event, currentVideo.id, currentVideo.title);
                }
            });

            playerNotInterestedBtn.addEventListener('click', (event) => { // يجب تمرير event
                if (currentVideo) {
                    markNotInterested(event, currentVideo.id);
                    // playerMoreMenu.classList.remove('active'); // إغلاق القائمة بعد النقر - تم إزالته لتجنب إغلاق كل القوائم
                }
            });

        })();
    </script>
</body>
</html>
